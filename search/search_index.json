{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"THE SKINNY CODER \u00b6 Hello, people. This is Rahul SriRam , and welcome to my blog, TheSkinnyCoder . I'll be discussing and teaching you almost all of the Data Structures, Algorithms, in famous programming langauages like C++ and JAVA. C #include <stdio.h> int main () { printf ( \"Hello, World! \\n \" ); return 0 ; } C++ #include <iostream> int main () { std :: cout << \"Hello, World! \\n \" ; return 0 ; } JAVA class MainClass { public static void main ( String [] args ) { System . out . println ( \"Hello, World!\" ); } } Python if __name__ == '__main__' : print ( 'Hello, World!' ) JavaScript console . log ( 'Hello, World!\\n' ); Bash echo \"Hello, World\\n\" ;","title":"Home"},{"location":"#the-skinny-coder","text":"Hello, people. This is Rahul SriRam , and welcome to my blog, TheSkinnyCoder . I'll be discussing and teaching you almost all of the Data Structures, Algorithms, in famous programming langauages like C++ and JAVA. C #include <stdio.h> int main () { printf ( \"Hello, World! \\n \" ); return 0 ; } C++ #include <iostream> int main () { std :: cout << \"Hello, World! \\n \" ; return 0 ; } JAVA class MainClass { public static void main ( String [] args ) { System . out . println ( \"Hello, World!\" ); } } Python if __name__ == '__main__' : print ( 'Hello, World!' ) JavaScript console . log ( 'Hello, World!\\n' ); Bash echo \"Hello, World\\n\" ;","title":"THE SKINNY CODER"},{"location":"devenv/vscode-basics/","text":"VSCode Series Part-1 : The Basic Setup \u00b6 Introduction to Visual Studio Code \u00b6 Visual Studio Code is a code-editor built on ElectronJS, a JS framework, used to develop desktop applications. It is developed and maintained by Microsoft. Text Editors : Lack some essential features and need tardy jobs to be done by the programmer itself. IDEs : Heavy and a bit too much for small applications. Features of VSCode Intellisense. Integrated Terminal. Extensions for extra support. Looks hot and geeky. Has got a wide-range of use-cases and supports many programming languages : perfect for web development. a better option for C/C++ development compared to CodeBlocks, NetBeans etc has got tremendous support for Python development (in built REPL, Jupyter Notebooks etc) Let's get started! 1. Installation \u00b6 Go to Visual Studio Code Official Site and download VSCode. Open the executable installer and install VSCode. Make sure that the Add to PATH is checked in. 2. Opening VSCode \u00b6 Drag and drop the folder you want to open on the VSCode shortcut. Go to the folder in CLI and enter code . (Works only if VSCode is added to PATH . In VSCode, go to File > Open Folder and select the desired folder. 3. EditorConfig and Settings \u00b6 .editorconfig file can be created in the root of the workspace. Use the EditorConfig for VS Code extension to generate it. There is a UI mode and a settings.json file too. Tip Zen-Mode and Centred Layout can be used it for a wider range of view and for no-disturbance mode. 4. The Command Palette and Edititing files \u00b6 Basic intellisense is enabled for Web Development technology stacks. Use Visual Studio Intellicode , for better and extra intellisense. Press ctrl+space for auto-complete suggestions. 5. KeyBoard Shortcuts \u00b6 Toggle the essentials \u00b6 Toggle side-bar : ctrl+b Toggle Settings : ctrl+, Toggle integrated terminal : ctrl+oem3 Open a new terminal : ctrl+shift+oem3 Toggle Command Palette : ctrl+shift+p Comment and UnComment : ctrl+/ Cut, Copy and Pastes \u00b6 Cut/Copy/Paste lines : ctrl+x , ctrl+c and ctrl+v respectively. Move lines up/down : alt+up and alt+down Create copies of lines up/down. alt+shift+up and alt+shift+down Navigations and Selections \u00b6 Switch between the tabs : ctrl+tab Move by word : alt+right , alt+left Remove line : shift+ctrl+k Select/Deselect next match : ctrl+d and ctrl+u Others \u00b6 Suggestions : ctrl+space Change Color Theme : ctrl+k, ctrl+t Multiple Cursors : alt+click Tip 1. Fake text (Lorem Ipsum) can be created using Emmet. 2. Keymaps from other Editors and IDEs can be used too. 6. UI Tweaks \u00b6 Fonts and Cursor \u00b6 Some fonts that are widely used in the programming community : Dank Mono Operator Mono Monaco Source Code Pro Ubuntu Mono Fira Code Menlo Tip Enable font-ligatures for an enhanced experience! // Font Settings : \"editor.fontFamily\" : \"Dank Mono\" , \"editor.fontLigatures\" : true , \"editor.fontSize\" : 19 , \"editor.fontWeight\" : \"500\" , \"editor.lineNumbers\" : \"on\" , \"zenMode.hideLineNumbers\" : false , // Cursor Settings : \"editor.cursorBlinking\" : \"smooth\" , \"editor.cursorStyle\" : \"underline\" , \"editor.cursorSurroundingLines\" : 0 , \"editor.cursorSmoothCaretAnimation\" : true , \"workbench.colorCustomizations\" : { \"terminalCursor.foreground\" : \"#ff0099\" , \"editorCursor.foreground\" : \"#ff0099\" } , Saving and Formatting \u00b6 Auto-Save, Format and Wrap your code for a better look. // Comments, Brackets, Indentation and Quotes \"editor.tabSize\" : 2 , \"editor.autoIndent\" : \"advanced\" , \"editor.autoClosingBrackets\" : \"languageDefined\" , \"editor.autoClosingQuotes\" : \"languageDefined\" , \"editor.comments.insertSpace\" : true , // Bracket Pair Colorizer should be installed : \"bracketPairColorizer.showVerticalScopeLine\" : false , \"bracketPairColorizer.showHorizontalScopeLine\" : false , // Saving and Formatting \"editor.wordWrap\" : \"on\" , \"editor.formatOnType\" : true , \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : true , \"files.autoSave\" : \"afterDelay\" , Color and Icon Themes \u00b6 Some of my favourite color schemes are : Night Owl Envy Predawn Theme Kit Oceanic Next Ayu Dark Meta Nord Dark \u2605\u2605\u2605\u2605\u2605 Some of my favourite icon themes are: Helium Icon Theme VSCode Great Icons Tip Enable semanting highlighting for enhanced experience. // Color and Icon Schemes : \"workbench.colorTheme\" : \"Night Owl\" , \"workbench.iconTheme\" : \"helium-icon-theme\" , \"editor.tokenColorCustomizations\" : { \"semanticHighlighting\" : true } , \"editor.semanticHighlighting.enabled\" : true , // Other UI tweaks : \"explorer.openEditors.visible\" : 0 , \"extensions.showRecommendationsOnlyOnDemand\" : true Tip Color Schemes can be modified too. But, I recommend not to! 7. The Integrated Terminal \u00b6 On Windows, it is better to use Git Bash as the default command line. If you have aliases or a modified console, use shell arguments in the VSCode settings to use that shell. \"terminal.integrated.shell.windows\" : \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\" , \"terminal.integrated.shellArgs.windows\" : [ \"--login\" , \"-i\" ] , \"terminal.integrated.fontFamily\" : \"Monaco\" , \"terminal.integrated.fontSize\" : 16 , \"terminal.integrated.fontWeight\" : \"400\" , \"terminal.integrated.cursorStyle\" : \"underline\" , \"terminal.integrated.cursorBlinking\" : true , \"terminal.integrated.letterSpacing\" : 2.5 , \"terminal.integrated.lineHeight\" : 1.2 , 8. Useful extensions \u00b6 EditorConfig for VS Code Visual Studio Intellicode Bracket Pair Colorizer or Rainbow Indent Settings Sync SVG Viewer VSCode Faker Polacode GitLens and Git History 9. Version Control in VSCode \u00b6 We can initialize a repositry, add files to the staging area, commit,pull, push etc. GitLens and Git History extensions can be used for more advanced Git usage.","title":"Setup VSCode - The Basics"},{"location":"devenv/vscode-basics/#vscode-series-part-1-the-basic-setup","text":"","title":"VSCode Series Part-1 : The Basic Setup"},{"location":"devenv/vscode-basics/#introduction-to-visual-studio-code","text":"Visual Studio Code is a code-editor built on ElectronJS, a JS framework, used to develop desktop applications. It is developed and maintained by Microsoft. Text Editors : Lack some essential features and need tardy jobs to be done by the programmer itself. IDEs : Heavy and a bit too much for small applications. Features of VSCode Intellisense. Integrated Terminal. Extensions for extra support. Looks hot and geeky. Has got a wide-range of use-cases and supports many programming languages : perfect for web development. a better option for C/C++ development compared to CodeBlocks, NetBeans etc has got tremendous support for Python development (in built REPL, Jupyter Notebooks etc) Let's get started!","title":"Introduction to Visual Studio Code"},{"location":"devenv/vscode-basics/#1-installation","text":"Go to Visual Studio Code Official Site and download VSCode. Open the executable installer and install VSCode. Make sure that the Add to PATH is checked in.","title":"1. Installation"},{"location":"devenv/vscode-basics/#2-opening-vscode","text":"Drag and drop the folder you want to open on the VSCode shortcut. Go to the folder in CLI and enter code . (Works only if VSCode is added to PATH . In VSCode, go to File > Open Folder and select the desired folder.","title":"2. Opening VSCode"},{"location":"devenv/vscode-basics/#3-editorconfig-and-settings","text":".editorconfig file can be created in the root of the workspace. Use the EditorConfig for VS Code extension to generate it. There is a UI mode and a settings.json file too. Tip Zen-Mode and Centred Layout can be used it for a wider range of view and for no-disturbance mode.","title":"3. EditorConfig and Settings"},{"location":"devenv/vscode-basics/#4-the-command-palette-and-edititing-files","text":"Basic intellisense is enabled for Web Development technology stacks. Use Visual Studio Intellicode , for better and extra intellisense. Press ctrl+space for auto-complete suggestions.","title":"4. The Command Palette and Edititing files"},{"location":"devenv/vscode-basics/#5-keyboard-shortcuts","text":"","title":"5. KeyBoard Shortcuts"},{"location":"devenv/vscode-basics/#toggle-the-essentials","text":"Toggle side-bar : ctrl+b Toggle Settings : ctrl+, Toggle integrated terminal : ctrl+oem3 Open a new terminal : ctrl+shift+oem3 Toggle Command Palette : ctrl+shift+p Comment and UnComment : ctrl+/","title":"Toggle the essentials"},{"location":"devenv/vscode-basics/#cut-copy-and-pastes","text":"Cut/Copy/Paste lines : ctrl+x , ctrl+c and ctrl+v respectively. Move lines up/down : alt+up and alt+down Create copies of lines up/down. alt+shift+up and alt+shift+down","title":"Cut, Copy and Pastes"},{"location":"devenv/vscode-basics/#navigations-and-selections","text":"Switch between the tabs : ctrl+tab Move by word : alt+right , alt+left Remove line : shift+ctrl+k Select/Deselect next match : ctrl+d and ctrl+u","title":"Navigations and Selections"},{"location":"devenv/vscode-basics/#others","text":"Suggestions : ctrl+space Change Color Theme : ctrl+k, ctrl+t Multiple Cursors : alt+click Tip 1. Fake text (Lorem Ipsum) can be created using Emmet. 2. Keymaps from other Editors and IDEs can be used too.","title":"Others"},{"location":"devenv/vscode-basics/#6-ui-tweaks","text":"","title":"6. UI Tweaks"},{"location":"devenv/vscode-basics/#fonts-and-cursor","text":"Some fonts that are widely used in the programming community : Dank Mono Operator Mono Monaco Source Code Pro Ubuntu Mono Fira Code Menlo Tip Enable font-ligatures for an enhanced experience! // Font Settings : \"editor.fontFamily\" : \"Dank Mono\" , \"editor.fontLigatures\" : true , \"editor.fontSize\" : 19 , \"editor.fontWeight\" : \"500\" , \"editor.lineNumbers\" : \"on\" , \"zenMode.hideLineNumbers\" : false , // Cursor Settings : \"editor.cursorBlinking\" : \"smooth\" , \"editor.cursorStyle\" : \"underline\" , \"editor.cursorSurroundingLines\" : 0 , \"editor.cursorSmoothCaretAnimation\" : true , \"workbench.colorCustomizations\" : { \"terminalCursor.foreground\" : \"#ff0099\" , \"editorCursor.foreground\" : \"#ff0099\" } ,","title":"Fonts and Cursor"},{"location":"devenv/vscode-basics/#saving-and-formatting","text":"Auto-Save, Format and Wrap your code for a better look. // Comments, Brackets, Indentation and Quotes \"editor.tabSize\" : 2 , \"editor.autoIndent\" : \"advanced\" , \"editor.autoClosingBrackets\" : \"languageDefined\" , \"editor.autoClosingQuotes\" : \"languageDefined\" , \"editor.comments.insertSpace\" : true , // Bracket Pair Colorizer should be installed : \"bracketPairColorizer.showVerticalScopeLine\" : false , \"bracketPairColorizer.showHorizontalScopeLine\" : false , // Saving and Formatting \"editor.wordWrap\" : \"on\" , \"editor.formatOnType\" : true , \"editor.formatOnSave\" : true , \"editor.formatOnPaste\" : true , \"files.autoSave\" : \"afterDelay\" ,","title":"Saving and Formatting"},{"location":"devenv/vscode-basics/#color-and-icon-themes","text":"Some of my favourite color schemes are : Night Owl Envy Predawn Theme Kit Oceanic Next Ayu Dark Meta Nord Dark \u2605\u2605\u2605\u2605\u2605 Some of my favourite icon themes are: Helium Icon Theme VSCode Great Icons Tip Enable semanting highlighting for enhanced experience. // Color and Icon Schemes : \"workbench.colorTheme\" : \"Night Owl\" , \"workbench.iconTheme\" : \"helium-icon-theme\" , \"editor.tokenColorCustomizations\" : { \"semanticHighlighting\" : true } , \"editor.semanticHighlighting.enabled\" : true , // Other UI tweaks : \"explorer.openEditors.visible\" : 0 , \"extensions.showRecommendationsOnlyOnDemand\" : true Tip Color Schemes can be modified too. But, I recommend not to!","title":"Color and Icon Themes"},{"location":"devenv/vscode-basics/#7-the-integrated-terminal","text":"On Windows, it is better to use Git Bash as the default command line. If you have aliases or a modified console, use shell arguments in the VSCode settings to use that shell. \"terminal.integrated.shell.windows\" : \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\" , \"terminal.integrated.shellArgs.windows\" : [ \"--login\" , \"-i\" ] , \"terminal.integrated.fontFamily\" : \"Monaco\" , \"terminal.integrated.fontSize\" : 16 , \"terminal.integrated.fontWeight\" : \"400\" , \"terminal.integrated.cursorStyle\" : \"underline\" , \"terminal.integrated.cursorBlinking\" : true , \"terminal.integrated.letterSpacing\" : 2.5 , \"terminal.integrated.lineHeight\" : 1.2 ,","title":"7. The Integrated Terminal"},{"location":"devenv/vscode-basics/#8-useful-extensions","text":"EditorConfig for VS Code Visual Studio Intellicode Bracket Pair Colorizer or Rainbow Indent Settings Sync SVG Viewer VSCode Faker Polacode GitLens and Git History","title":"8. Useful extensions"},{"location":"devenv/vscode-basics/#9-version-control-in-vscode","text":"We can initialize a repositry, add files to the staging area, commit,pull, push etc. GitLens and Git History extensions can be used for more advanced Git usage.","title":"9. Version Control in VSCode"},{"location":"devess/bash1/","text":"BASH \u00b6 1. PreRequisites \u00b6 a. What is BASh \u00b6 BASh* means B ourne A gain Sh ell. It is a langauge used in the CLIs of *nix environments. In Windows OSes, Batch (Command Prompt) and PowerShell langauges are used in their CLIs. Bash can also be used by installing GitBash or WSL on Windows. For this tutorial we'll stick to GitBash . b. Current and Parent Directories \u00b6 In Bash(*nix), folders are called as directories . . means current working directory(cwd). Similarly, .. means, the parent directory of the cwd. c. Dotfiles and Hidden files \u00b6 Files and Directories which are prepended with a ' . ' are hidden . In general, configuration files are dotfiles, and doesn't have extensions/file-formats. d. Root and Home directories \u00b6 In any OS, there will be a ROOT directory : In *nix, it is / . In Windows(GitBash), it is /C:/ . It is denoted by / . In any OS, there will be a HOME directory : In Linux, it is /home/<user_name> . In Mac, it is /Users/<user_name> . In Windows(GitBash), it is /C:/Users/<user_name> . It is denoted by ~ . When a terminal session starts, by defualt it'll start in ~ . e. Absolute and Relative Paths \u00b6 An absolute path will start from the root directory for all its children directories. A relative path will be relative to the cwd and we'll use . and .. for denoting the relative paths. f. Package Managers \u00b6 All the softwares and tools can be downloaded and installed into the system as packages . To install packages, there are some default package managers that we can use : a. Linux : dpkg, apt, pacman, snap etc. b. Mac : brew c. Windows : chocolatey g. Clear, Help and Close commands \u00b6 Use clear or press Ctrl+L to clear the console. Use exit or press Ctrl+D to exit the terminal. To get help : a. In Windows, use help <command> . b. In *nix, use man <command> . 2. Navigating the File System \u00b6 a. The pwd command \u00b6 This command p rints the w orking d irectory, i.e., the absolute path of cwd, i.e. , . b. The ls command \u00b6 This command lists the children files and directories of a directory. ls : Enlists the children files and directories of cwd, i.e., . ls <rel_path_to_dest_dir> : Enlists the children files and directories of the destination directory. Flags to the ls command \u00b6 -a : Enlists the hidden files too. -l : Includes details like r/w info, date of modification etc. -F : Appends a / for diirectories, * after executables, and @ after SymLinks. Tip flags can be combined too! For example, ** -la ** . c. The cd command \u00b6 This command C hanges the D irectory. / (or) cd / : Directly goes to / . cd (or) cd ~ : Directly goes to ~ . cd <rel_path_to_dest_dir> : Navigates to the destination directory. cd - : Directly goes to the previous directory. Tip Press 'tab' to auto-complete the file/directory names, and commands! d. The tree command \u00b6 This command enlists the children files and directories in the form of a tree . By defualt, it isn't installed on many OSes. Installation \u00b6 Linux $ sudo apt-get install tree // Debian $ sudo yum install tree // CentOS $ sudo zypper in tree // OpenSUSE Mac // May need sudo $ brew install tree Windows // Run this on an elevated shell, i.e., as administrator $ choco install tree Flags to the tree command \u00b6 -a : Enlists the hidden files too. -L : Depth can be specified after this flag and only till that depth the children are printed. -F : Appends a / for diirectories. -d : List directories only. e. The cat command \u00b6 This command con cat enates the content of a file in the console. cat <file_name> : Displays the content of the given file name into the terminal. Flags to the cat command \u00b6 -b : Assigns line numbers to non-empty o/p lines. -s : Suppresses repeated empty output lines. 3. Making Changes to the File System \u00b6 a. The mkdir command \u00b6 This command is used to m a k e an empty dir ectory. mkdir <new_dir_name> : Creates an empty directory with the given name. b. The rmdir command \u00b6 This command is used to r e m ove an empty dir ectory. rmdir <new_dir_name> : Removes an empty directory with the given name. c. The touch command \u00b6 This command is used to create an empty file. touch <new_file_name> : Creates an empty file with the given name. d. The rm command \u00b6 This command is used to r e m ove a file. Flags to the rm command \u00b6 -f : Force deletes empty/non-empty/existing/non-existing files without prompting the user. -r (or) -R : Can be used to recursively delete the directory and its children too. -d : Removes empty directories. e. The mv command \u00b6 Moving files and directories \u00b6 mv <path_to_src_file> <path_to_dest_dir> : Moves a file existing at a path to the destination directory. mv -r <path_to_src_dir> <path_to_dest_dir> : Moves a directory from its path to the destination directory, with all of its children. Renaming files and directories \u00b6 mv <path_with_old_name> <path_with_new_name> : Renames a file/directory with the new name. The cp command \u00b6 cp <path_to_src_file> <path_to_dest_file_with_name> : Copies a file existing at a path to the the destination path, giving it the name that is passed. cp -r <path_to_src_dir> <path_to_dest_dir_with_name> : Copies a directory from its path to the destination directory, giving it the name that is passed, with all of its children. **** \u00b6","title":"Some basic bash"},{"location":"devess/bash1/#bash","text":"","title":"BASH"},{"location":"devess/bash1/#1-prerequisites","text":"","title":"1. PreRequisites"},{"location":"devess/bash1/#a-what-is-bash","text":"BASh* means B ourne A gain Sh ell. It is a langauge used in the CLIs of *nix environments. In Windows OSes, Batch (Command Prompt) and PowerShell langauges are used in their CLIs. Bash can also be used by installing GitBash or WSL on Windows. For this tutorial we'll stick to GitBash .","title":"a. What is BASh"},{"location":"devess/bash1/#b-current-and-parent-directories","text":"In Bash(*nix), folders are called as directories . . means current working directory(cwd). Similarly, .. means, the parent directory of the cwd.","title":"b. Current and Parent Directories"},{"location":"devess/bash1/#c-dotfiles-and-hidden-files","text":"Files and Directories which are prepended with a ' . ' are hidden . In general, configuration files are dotfiles, and doesn't have extensions/file-formats.","title":"c. Dotfiles and Hidden files"},{"location":"devess/bash1/#d-root-and-home-directories","text":"In any OS, there will be a ROOT directory : In *nix, it is / . In Windows(GitBash), it is /C:/ . It is denoted by / . In any OS, there will be a HOME directory : In Linux, it is /home/<user_name> . In Mac, it is /Users/<user_name> . In Windows(GitBash), it is /C:/Users/<user_name> . It is denoted by ~ . When a terminal session starts, by defualt it'll start in ~ .","title":"d. Root and Home directories"},{"location":"devess/bash1/#e-absolute-and-relative-paths","text":"An absolute path will start from the root directory for all its children directories. A relative path will be relative to the cwd and we'll use . and .. for denoting the relative paths.","title":"e. Absolute and Relative Paths"},{"location":"devess/bash1/#f-package-managers","text":"All the softwares and tools can be downloaded and installed into the system as packages . To install packages, there are some default package managers that we can use : a. Linux : dpkg, apt, pacman, snap etc. b. Mac : brew c. Windows : chocolatey","title":"f. Package Managers"},{"location":"devess/bash1/#g-clear-help-and-close-commands","text":"Use clear or press Ctrl+L to clear the console. Use exit or press Ctrl+D to exit the terminal. To get help : a. In Windows, use help <command> . b. In *nix, use man <command> .","title":"g. Clear, Help and Close commands"},{"location":"devess/bash1/#2-navigating-the-file-system","text":"","title":"2. Navigating the File System"},{"location":"devess/bash1/#a-the-pwd-command","text":"This command p rints the w orking d irectory, i.e., the absolute path of cwd, i.e. , .","title":"a. The pwd command"},{"location":"devess/bash1/#b-the-ls-command","text":"This command lists the children files and directories of a directory. ls : Enlists the children files and directories of cwd, i.e., . ls <rel_path_to_dest_dir> : Enlists the children files and directories of the destination directory.","title":"b. The ls command"},{"location":"devess/bash1/#flags-to-the-ls-command","text":"-a : Enlists the hidden files too. -l : Includes details like r/w info, date of modification etc. -F : Appends a / for diirectories, * after executables, and @ after SymLinks. Tip flags can be combined too! For example, ** -la ** .","title":"Flags to the ls command"},{"location":"devess/bash1/#c-the-cd-command","text":"This command C hanges the D irectory. / (or) cd / : Directly goes to / . cd (or) cd ~ : Directly goes to ~ . cd <rel_path_to_dest_dir> : Navigates to the destination directory. cd - : Directly goes to the previous directory. Tip Press 'tab' to auto-complete the file/directory names, and commands!","title":"c. The cd command"},{"location":"devess/bash1/#d-the-tree-command","text":"This command enlists the children files and directories in the form of a tree . By defualt, it isn't installed on many OSes.","title":"d. The tree command"},{"location":"devess/bash1/#installation","text":"Linux $ sudo apt-get install tree // Debian $ sudo yum install tree // CentOS $ sudo zypper in tree // OpenSUSE Mac // May need sudo $ brew install tree Windows // Run this on an elevated shell, i.e., as administrator $ choco install tree","title":"Installation"},{"location":"devess/bash1/#flags-to-the-tree-command","text":"-a : Enlists the hidden files too. -L : Depth can be specified after this flag and only till that depth the children are printed. -F : Appends a / for diirectories. -d : List directories only.","title":"Flags to the tree command"},{"location":"devess/bash1/#e-the-cat-command","text":"This command con cat enates the content of a file in the console. cat <file_name> : Displays the content of the given file name into the terminal.","title":"e. The cat command"},{"location":"devess/bash1/#flags-to-the-cat-command","text":"-b : Assigns line numbers to non-empty o/p lines. -s : Suppresses repeated empty output lines.","title":"Flags to the cat command"},{"location":"devess/bash1/#3-making-changes-to-the-file-system","text":"","title":"3. Making Changes to the File System"},{"location":"devess/bash1/#a-the-mkdir-command","text":"This command is used to m a k e an empty dir ectory. mkdir <new_dir_name> : Creates an empty directory with the given name.","title":"a. The mkdir command"},{"location":"devess/bash1/#b-the-rmdir-command","text":"This command is used to r e m ove an empty dir ectory. rmdir <new_dir_name> : Removes an empty directory with the given name.","title":"b. The rmdir command"},{"location":"devess/bash1/#c-the-touch-command","text":"This command is used to create an empty file. touch <new_file_name> : Creates an empty file with the given name.","title":"c. The touch command"},{"location":"devess/bash1/#d-the-rm-command","text":"This command is used to r e m ove a file.","title":"d. The rm command"},{"location":"devess/bash1/#flags-to-the-rm-command","text":"-f : Force deletes empty/non-empty/existing/non-existing files without prompting the user. -r (or) -R : Can be used to recursively delete the directory and its children too. -d : Removes empty directories.","title":"Flags to the rm command"},{"location":"devess/bash1/#e-the-mv-command","text":"","title":"e. The mv command"},{"location":"devess/bash1/#moving-files-and-directories","text":"mv <path_to_src_file> <path_to_dest_dir> : Moves a file existing at a path to the destination directory. mv -r <path_to_src_dir> <path_to_dest_dir> : Moves a directory from its path to the destination directory, with all of its children.","title":"Moving files and directories"},{"location":"devess/bash1/#renaming-files-and-directories","text":"mv <path_with_old_name> <path_with_new_name> : Renames a file/directory with the new name.","title":"Renaming files and directories"},{"location":"devess/bash1/#the-cp-command","text":"cp <path_to_src_file> <path_to_dest_file_with_name> : Copies a file existing at a path to the the destination path, giving it the name that is passed. cp -r <path_to_src_dir> <path_to_dest_dir_with_name> : Copies a directory from its path to the destination directory, giving it the name that is passed, with all of its children.","title":"The cp command"},{"location":"devess/bash1/#_1","text":"","title":"****"},{"location":"devess/markdown/","text":"MARKDOWN TUTORIAL : \u00b6 Comments in MarkDown are similar to those of HTML : <!-- This is a comment --> Output : You can't see it here Lol, look for it in the code. A. NORMAL TEXT : \u00b6 This is normal text. Output : This is normal text. B. HORIZONTAL RULES : \u00b6 To draw a hortizontal rule, use 3 hyphens(---). --- Output : C. Headings : \u00b6 After the 1 st and the 2 nd type headings, a horizontal rule will be drawn. 1. HEADINGS WITH HYPHENS AND EQUAL-TOs : \u00b6 Put 3 equal-to signs(===) under a text to make it Heading 1. === Put 3 hyphens(---) under a text to make it Heading 2. --- Output : Put 3 equal-to signs(===) under a text to make it Heading 1. \u00b6 Put 3 hyphens(---) under a text to make it Heading 2. \u00b6 In this method, only 2 headings are possible. 2. HEADINGS WITH HASHES : \u00b6 # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 Output : Heading 1 \u00b6 Heading 2 \u00b6 Heading 3 \u00b6 Heading 4 \u00b6 Heading 5 \u00b6 Heading 6 \u00b6 D. TEXT FORMATTING : \u00b6 1. ITALICS : \u00b6 *Italic Text should be wrapped with single asterisks* _Italic Text should be wrapped with single underscores_ Output : Italic Text should be wrapped with single asterisks Italic Text should be wrapped with single underscores 2. BOLD/STRONG TEXT : \u00b6 **Bold Text should be wrapped with double asterisks** __Bold Text should be wrapped with double underscores__ Output : Bold Text should be wrapped with double asterisks Bold Text should be wrapped with double underscores Use asterisks for strong text and underscores for italics, for better and clean code. 3. STRIKE-THROUGH TEXT : \u00b6 ~~Strike-Through Text should be wrapped with double tildes~~ Output : Strike-Through Text should be wrapped with double tildes 4. BLOCK-QUOTES : \u00b6 > A Block-Quote should start with a greater than sign(>) Output : A Block-Quote should start with a greater than sign(>) E. LISTS : \u00b6 1. Unordered Lists : \u00b6 Unordered lists can be formed using asterisks(*), a hyphen(-) or a plus sign(+). * Item 1 - Item 2 + Item 3 - Nested Item 1 * Nested Item 2 Output : Item 1 Item 2 Item 3 Nested Item 1 Nested Item 2 2. Ordered Lists : \u00b6 Ordered lists can be formed using numbers. Prefer to write all 1s. 1. Item 1 1. Item 2 1. Item 3 + Nested Item 1 - Nested Item 2 Output : Item 1 Item 2 Item 3 Nested Item 1 Nested Item 2 F. CODE : \u00b6 1. INLINE CODE-BLOCKS : \u00b6 For inline code-blocks, we wrap the code in back-ticks, like this : git commit -m \"Initialcommit\" or like this : echo \"Hello, World!\" 2. INDENTED CODE-BLOCKS : \u00b6 We indent the code-blocks by 4 spaces, to make it appear like code. #include<iostream> int main() { std::cout << \"Hello, World!\" << std::endl; return 0; } Output : 1 2 3 4 5 6 #include<iostream> int main() { std::cout << \"Hello, World!\" << std::endl; return 0; } Indented code-blocks are NOT syntax highlighted. 3. UNINDENTED CODE-BLOCKS : \u00b6 We wrap the code-blocks with 3 back-ticks(```) or 3 tildes( ~ ). By default, these are NOT syntax highlighted, too. ``` // With back-ticks class MainClass { public static void main(String args[]) { System.out.println(\"Hello, World!\"); } } ``` Output : // With back-ticks class MainClass { public static void main(String args[]) { System.out.println(\"Hello, World!\"); } } ~~~ // With tildes class Animal() { constructor(props) { super(props); } } ~~~ Output : // With tildes class Animal() { constructor(props) { super(props); } } To get syntax-highlighting, we can specify the name of the language after thefirst 3 back-ticks. JavaScript : \u00b6 ```javascript // This is JS const add = (num1, num2) => num1 + num2; if (add(1, 2)) console.log('The sum is a number'); else console.log('The sum is zero'); ``` Output : // This is JS const add = ( num1 , num2 ) => num1 + num2 ; if ( add ( 1 , 2 )) console . log ( 'The sum is a number' ); else console . log ( 'The sum is zero' ); Python : \u00b6 ```python def add(num1, num2): return num1 + num2 ``` Output : def add ( num1 , num2 ): return num1 + num2 Bash : \u00b6 ```bash npm i -D lodash npm run build ``` Output : npm i -D lodash npm run build Diff : \u00b6 ```diff - import * as React from 'react'; + import React, { Component } from 'react'; const app = () => { // Some lines of code } export default app; ``` Output : - import * as React from 'react'; + import React, { Component } from 'react'; const app = () => { // Some lines of code } export default app; G. IMAGES : \u00b6 1. IMAGES WITHOUT ALTERNATE TEXT : \u00b6 ![TSC Logo](https://theskinnycoder.github.io/TSC.png) Output : 2. IMAGES WITH ALTERNATE TEXT : \u00b6 Hover over the image to see the difference. Notice the space between the image's path and the alternate text. ![TSC Logo](https://theskinnycoder.github.io/TSC.png \"The Skinny Coder Logo\") Output : H. LINKS : \u00b6 Many MarkDown processors automatically turn URLs into links. For example : www.google.com To disable it, wrap the URL with back-ticks(`) For example : www.google.com 1. LINKS WITHOUT ALTERNATE TEXT : \u00b6 [The Skinny Coder](theskinnycoder.github.io) Output : The Skinny Coder 2. LINKS WITH ALTERNATE TEXT : \u00b6 Hover over the link to see the difference. Notice the space between the link's url and the alternate text. [The Skinny Coder](theskinnycoder.github.io \"The Skinny Coder\") Output : The Skinny Coder I. TABLES : \u00b6 To add a table, use 3/more hyphens(---) to create each column\u2019s header, and use pipes(|) to separate each column. You can optionally add pipes on either end of the table. | Name | Email | | --- | --- | | Rahul SriRam | tsc@mail.com | | James Golsing | james@mail.com | Output : Name Email Rahul SriRam tsc@mail.com James Golsing james@mail.com You can align text in the columns to the left, right, or center by adding a colon(:) to the left, right, or on both side of the hyphens within the header row, respectively. | Syntax | Description | Test Text | |:----------|:-----------:|------------:| | Header | Title | Here's this | | Paragraph | Text | And more | Output : Syntax Description Test Text Header Title Here's this Paragraph Text And more J. TASK-LISTS/CHECK-BOXES : \u00b6 Same as lists, but we put an 'x' in between the brackets, i.e., [], to check the box in, and leave a space( ), to check-out the box. * [x] Task 1 - [x] Task 2 + [ ] Task 3 Output : Task 1 Task 2 Task 3","title":"Learn MarkDown for easier Web-Development"},{"location":"devess/markdown/#markdown-tutorial","text":"Comments in MarkDown are similar to those of HTML : <!-- This is a comment --> Output : You can't see it here Lol, look for it in the code.","title":"MARKDOWN TUTORIAL :"},{"location":"devess/markdown/#a-normal-text","text":"This is normal text. Output : This is normal text.","title":"A. NORMAL TEXT :"},{"location":"devess/markdown/#b-horizontal-rules","text":"To draw a hortizontal rule, use 3 hyphens(---). --- Output :","title":"B. HORIZONTAL RULES :"},{"location":"devess/markdown/#c-headings","text":"After the 1 st and the 2 nd type headings, a horizontal rule will be drawn.","title":"C. Headings :"},{"location":"devess/markdown/#1-headings-with-hyphens-and-equal-tos","text":"Put 3 equal-to signs(===) under a text to make it Heading 1. === Put 3 hyphens(---) under a text to make it Heading 2. --- Output :","title":"1. HEADINGS WITH HYPHENS AND EQUAL-TOs :"},{"location":"devess/markdown/#put-3-equal-to-signs-under-a-text-to-make-it-heading-1","text":"","title":"Put 3 equal-to signs(===) under a text to make it Heading 1."},{"location":"devess/markdown/#put-3-hyphens-under-a-text-to-make-it-heading-2","text":"In this method, only 2 headings are possible.","title":"Put 3 hyphens(---) under a text to make it Heading 2."},{"location":"devess/markdown/#2-headings-with-hashes","text":"# Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 Output :","title":"2. HEADINGS WITH HASHES :"},{"location":"devess/markdown/#heading-1","text":"","title":"Heading 1"},{"location":"devess/markdown/#heading-2","text":"","title":"Heading 2"},{"location":"devess/markdown/#heading-3","text":"","title":"Heading 3"},{"location":"devess/markdown/#heading-4","text":"","title":"Heading 4"},{"location":"devess/markdown/#heading-5","text":"","title":"Heading 5"},{"location":"devess/markdown/#heading-6","text":"","title":"Heading 6"},{"location":"devess/markdown/#d-text-formatting","text":"","title":"D. TEXT FORMATTING :"},{"location":"devess/markdown/#1-italics","text":"*Italic Text should be wrapped with single asterisks* _Italic Text should be wrapped with single underscores_ Output : Italic Text should be wrapped with single asterisks Italic Text should be wrapped with single underscores","title":"1. ITALICS :"},{"location":"devess/markdown/#2-boldstrong-text","text":"**Bold Text should be wrapped with double asterisks** __Bold Text should be wrapped with double underscores__ Output : Bold Text should be wrapped with double asterisks Bold Text should be wrapped with double underscores Use asterisks for strong text and underscores for italics, for better and clean code.","title":"2. BOLD/STRONG TEXT :"},{"location":"devess/markdown/#3-strike-through-text","text":"~~Strike-Through Text should be wrapped with double tildes~~ Output : Strike-Through Text should be wrapped with double tildes","title":"3. STRIKE-THROUGH TEXT :"},{"location":"devess/markdown/#4-block-quotes","text":"> A Block-Quote should start with a greater than sign(>) Output : A Block-Quote should start with a greater than sign(>)","title":"4. BLOCK-QUOTES :"},{"location":"devess/markdown/#e-lists","text":"","title":"E. LISTS :"},{"location":"devess/markdown/#1-unordered-lists","text":"Unordered lists can be formed using asterisks(*), a hyphen(-) or a plus sign(+). * Item 1 - Item 2 + Item 3 - Nested Item 1 * Nested Item 2 Output : Item 1 Item 2 Item 3 Nested Item 1 Nested Item 2","title":"1. Unordered Lists :"},{"location":"devess/markdown/#2-ordered-lists","text":"Ordered lists can be formed using numbers. Prefer to write all 1s. 1. Item 1 1. Item 2 1. Item 3 + Nested Item 1 - Nested Item 2 Output : Item 1 Item 2 Item 3 Nested Item 1 Nested Item 2","title":"2. Ordered Lists :"},{"location":"devess/markdown/#f-code","text":"","title":"F. CODE :"},{"location":"devess/markdown/#1-inline-code-blocks","text":"For inline code-blocks, we wrap the code in back-ticks, like this : git commit -m \"Initialcommit\" or like this : echo \"Hello, World!\"","title":"1. INLINE CODE-BLOCKS :"},{"location":"devess/markdown/#2-indented-code-blocks","text":"We indent the code-blocks by 4 spaces, to make it appear like code. #include<iostream> int main() { std::cout << \"Hello, World!\" << std::endl; return 0; } Output : 1 2 3 4 5 6 #include<iostream> int main() { std::cout << \"Hello, World!\" << std::endl; return 0; } Indented code-blocks are NOT syntax highlighted.","title":"2. INDENTED CODE-BLOCKS :"},{"location":"devess/markdown/#3-unindented-code-blocks","text":"We wrap the code-blocks with 3 back-ticks(```) or 3 tildes( ~ ). By default, these are NOT syntax highlighted, too. ``` // With back-ticks class MainClass { public static void main(String args[]) { System.out.println(\"Hello, World!\"); } } ``` Output : // With back-ticks class MainClass { public static void main(String args[]) { System.out.println(\"Hello, World!\"); } } ~~~ // With tildes class Animal() { constructor(props) { super(props); } } ~~~ Output : // With tildes class Animal() { constructor(props) { super(props); } } To get syntax-highlighting, we can specify the name of the language after thefirst 3 back-ticks.","title":"3. UNINDENTED CODE-BLOCKS :"},{"location":"devess/markdown/#javascript","text":"```javascript // This is JS const add = (num1, num2) => num1 + num2; if (add(1, 2)) console.log('The sum is a number'); else console.log('The sum is zero'); ``` Output : // This is JS const add = ( num1 , num2 ) => num1 + num2 ; if ( add ( 1 , 2 )) console . log ( 'The sum is a number' ); else console . log ( 'The sum is zero' );","title":"JavaScript :"},{"location":"devess/markdown/#python","text":"```python def add(num1, num2): return num1 + num2 ``` Output : def add ( num1 , num2 ): return num1 + num2","title":"Python :"},{"location":"devess/markdown/#bash","text":"```bash npm i -D lodash npm run build ``` Output : npm i -D lodash npm run build","title":"Bash :"},{"location":"devess/markdown/#diff","text":"```diff - import * as React from 'react'; + import React, { Component } from 'react'; const app = () => { // Some lines of code } export default app; ``` Output : - import * as React from 'react'; + import React, { Component } from 'react'; const app = () => { // Some lines of code } export default app;","title":"Diff :"},{"location":"devess/markdown/#g-images","text":"","title":"G. IMAGES :"},{"location":"devess/markdown/#1-images-without-alternate-text","text":"![TSC Logo](https://theskinnycoder.github.io/TSC.png) Output :","title":"1. IMAGES WITHOUT ALTERNATE TEXT :"},{"location":"devess/markdown/#2-images-with-alternate-text","text":"Hover over the image to see the difference. Notice the space between the image's path and the alternate text. ![TSC Logo](https://theskinnycoder.github.io/TSC.png \"The Skinny Coder Logo\") Output :","title":"2. IMAGES WITH ALTERNATE TEXT :"},{"location":"devess/markdown/#h-links","text":"Many MarkDown processors automatically turn URLs into links. For example : www.google.com To disable it, wrap the URL with back-ticks(`) For example : www.google.com","title":"H. LINKS :"},{"location":"devess/markdown/#1-links-without-alternate-text","text":"[The Skinny Coder](theskinnycoder.github.io) Output : The Skinny Coder","title":"1. LINKS WITHOUT ALTERNATE TEXT :"},{"location":"devess/markdown/#2-links-with-alternate-text","text":"Hover over the link to see the difference. Notice the space between the link's url and the alternate text. [The Skinny Coder](theskinnycoder.github.io \"The Skinny Coder\") Output : The Skinny Coder","title":"2. LINKS WITH ALTERNATE TEXT :"},{"location":"devess/markdown/#i-tables","text":"To add a table, use 3/more hyphens(---) to create each column\u2019s header, and use pipes(|) to separate each column. You can optionally add pipes on either end of the table. | Name | Email | | --- | --- | | Rahul SriRam | tsc@mail.com | | James Golsing | james@mail.com | Output : Name Email Rahul SriRam tsc@mail.com James Golsing james@mail.com You can align text in the columns to the left, right, or center by adding a colon(:) to the left, right, or on both side of the hyphens within the header row, respectively. | Syntax | Description | Test Text | |:----------|:-----------:|------------:| | Header | Title | Here's this | | Paragraph | Text | And more | Output : Syntax Description Test Text Header Title Here's this Paragraph Text And more","title":"I. TABLES :"},{"location":"devess/markdown/#j-task-listscheck-boxes","text":"Same as lists, but we put an 'x' in between the brackets, i.e., [], to check the box in, and leave a space( ), to check-out the box. * [x] Task 1 - [x] Task 2 + [ ] Task 3 Output : Task 1 Task 2 Task 3","title":"J. TASK-LISTS/CHECK-BOXES :"},{"location":"java/math/","text":"JAVA MATH CLASS : \u00b6 1. Floating-Point Precision Methods : \u00b6 A. Math.ceil(x) : \u00b6 Returns the value of x rounded down to its nearest integer. Similar to least-integer function in Math, i.e., \\mathbf{\\lceil{x}\\rceil = \\text{LIF}} \\mathbf{\\lceil{x}\\rceil = \\text{LIF}} \\text{Ex : }\\lceil{8.2}\\rceil = 9.0, \\lceil{-2.3}\\rceil = -2.0 \\text{Ex : }\\lceil{8.2}\\rceil = 9.0, \\lceil{-2.3}\\rceil = -2.0 Math . ceil ( 8.2 ); // 9.0 Math . ceil ( 9.7 ); // 10.0 Math . ceil ( - 2.3 ); // -2.0 Math . ceil ( - 4.8 ); // -4.0 B. Math.floor(x) : \u00b6 Returns the value of x rounded up to its nearest integer. Similar to greatest-integer function in Math, i.e., \\mathbf{\\lfloor{x}\\rfloor = \\text{GIF}} \\mathbf{\\lfloor{x}\\rfloor = \\text{GIF}} \\text{Ex : }\\lfloor{8.2}\\rfloor = 8.0, \\lfloor{-2.3}\\rfloor = -3.0 \\text{Ex : }\\lfloor{8.2}\\rfloor = 8.0, \\lfloor{-2.3}\\rfloor = -3.0 Math . floor ( 8.2 ); // 8.0 Math . floor ( 9.7 ); // 9.0 Math . floor ( - 2.3 ); // -3.0 Math . floor ( - 4.8 ); // -5.0 C. Math.round(x) : \u00b6 Returns the value of x rounded to its nearest integer. Math . round ( 8.2 ); // 8.0 Math . round ( 9.7 ); // 10.0 Math . round ( - 2.3 ); // -2.0 Math . round ( - 4.8 ); // -5.0 Math Constants for \\mathbf{\\pi} \\mathbf{\\pi} ** and e Math.PI Math . PI // 3.14285714286 Math.E Math . E // 2.7182818284 2. Logarithmic and Exponential Methods : \u00b6 A. Math.log(x) : \u00b6 Returns the value of natural logarithm of x , i.e., \\log_e{x} \\text{ or } \\ln{x} \\log_e{x} \\text{ or } \\ln{x} \\text{Ex : }\\log_{e}{e} = 1.0, \\ln{1} = 0.0 \\text{Ex : }\\log_{e}{e} = 1.0, \\ln{1} = 0.0 Math . log ( Math . E ); // 1.0 Math . log ( 0 ); // -Infinity Math . log ( 1 ); // 0.0 B. Math.log10(x) : \u00b6 Returns the value of \\log_{10}{x} \\log_{10}{x} \\text{Ex : }\\log_{10}{10} = 1.0, \\log_{10}{1} = 0.1 \\text{Ex : }\\log_{10}{10} = 1.0, \\log_{10}{1} = 0.1 Math . log10 ( 10 ); // 1.0 Math . log10 ( 100 ); // 10.0 Math . log10 ( 1 ); // 0.1 C. Math.exp(x) : \u00b6 Return the value of e raised to the power of x , i.e., e^x e^x : \\text{Ex : }e^0 = 0, e^1 = 2.7182 \\text{Ex : }e^0 = 0, e^1 = 2.7182 Math . exp ( 0 ); // 1.0 Math . exp ( 1 ); // 2.7182818284 // The above is equal to Math.E Math . exp ( 0.5 ); // 1.64872127 3. Power and Root Methods : \u00b6 A. Math.sqrt(x) : \u00b6 Returns the value of square-root of x , i.e., \\sqrt{x} \\sqrt{x} \\text{Ex : }\\sqrt{9} = 3.0, \\sqrt{2} = 1.414 \\text{Ex : }\\sqrt{9} = 3.0, \\sqrt{2} = 1.414 Math . sqrt ( 9 ); // 3.0 Math . sqrt ( - 36 ); // NaN Math . sqrt ( 2 ); // 1.41421356237 B. Math.cbrt(x) : \u00b6 Returns the value of cube-root of x , i.e., \\sqrt[3]{x} \\sqrt[3]{x} \\text{Ex : }\\sqrt[3]{8} = 2.0, \\sqrt[3]{-27} = -3.0 \\text{Ex : }\\sqrt[3]{8} = 2.0, \\sqrt[3]{-27} = -3.0 Math . cbrt ( 8 ); // 2.0 Math . cbrt ( - 27 ); // -3.0 Math . cbrt ( 45 ); // 3.55689330449 C. Math.pow(x, y) : \u00b6 Returns the value of x to the power of y , i.e., {x^y} {x^y} \\text{Ex : }2^3 = 8.0, 4^\\frac{1}{2} = 2.0 \\text{Ex : }2^3 = 8.0, 4^\\frac{1}{2} = 2.0 Math . pow ( 2 , 3 ); // 8.0 Math . pow ( 3 , 0 ); // 1.0 Math . pow ( 4 , 0.5 ); // 2.0 4. Sign-Related Methods : \u00b6 A. Math.abs(x) : \u00b6 Returns the absolute value of x . Similar to Modulus function in Math, i.e., \\mathbf{ \\vert{x}\\vert = \\begin{cases} +x, & \\text{if ${n > 0}$} \\\\ 0, & \\text{if ${n = 0}$} \\\\ +x, & \\text{if ${n < 0}$} \\\\ \\end{cases} = \\text{Modulus Function} } \\mathbf{ \\vert{x}\\vert = \\begin{cases} +x, & \\text{if ${n > 0}$} \\\\ 0, & \\text{if ${n = 0}$} \\\\ +x, & \\text{if ${n < 0}$} \\\\ \\end{cases} = \\text{Modulus Function} } \\text{Ex : }\\vert50\\vert = 50, \\vert-50\\vert = 50, \\vert-50.5\\vert = 50.5 \\text{Ex : }\\vert50\\vert = 50, \\vert-50\\vert = 50, \\vert-50.5\\vert = 50.5 Math . abs ( 50 ); // 50 Math . abs ( - 50 ); // 50 Math . abs ( - 50.5 ); // 50.5 B. Math.signum(x) : \u00b6 Similar to Signum function in Math, i.e., \\mathbf{ \\{x\\} = \\begin{cases} 1.0, & \\text{if ${x > 0}$} \\\\ 0, & \\text{if ${x = 0}$} \\\\ -1.0, & \\text{if ${x < 0}$} \\\\ \\end{cases} = \\text{Signum Function} } \\mathbf{ \\{x\\} = \\begin{cases} 1.0, & \\text{if ${x > 0}$} \\\\ 0, & \\text{if ${x = 0}$} \\\\ -1.0, & \\text{if ${x < 0}$} \\\\ \\end{cases} = \\text{Signum Function} } \\text{Ex : }\\{-50.5\\} = 50.5 \\text{Ex : }\\{-50.5\\} = 50.5 Math . signum ( 2.3 ); // 1.0 Math . signum ( - 5.7 ); // -1.0 Math . signum ( 0 ); // 0.0 5. Trigonometric Methods : \u00b6 A. Math.sin(x), Math.cos(x) : \u00b6 Returns the sine and cosine of x respectively, i.e., \\sin x \\text{ or } \\cos x \\sin x \\text{ or } \\cos x x should be passed in Radians. Math . sin ( 0 ); // 0.0 Math . sin ( Math . PI / 2 ); // 1.0 Math . sin ( - Math . PI / 2 ); // -1.0 Math . cos ( 0 ); // 1.0 Math . cos ( Math . PI ); // -1.0 Math . cos ( - Math . PI ); // -1.0 B. Math.asin(x), Math.acos(x) : \u00b6 Returns the arc-sine and arc-cosine (or, sine and cosine inverses, respectively) of x respectively, i.e., \\sin^{-1} x \\text{ or } \\cos^{-1} x \\sin^{-1} x \\text{ or } \\cos^{-1} x x should be passed in Radians. Math . asin ( 0.0 ); // 0.0 Math . asin ( 1.0 ); // 1.57142857143 Math . asin ( - 1.0 ); // -1.57142857143 Math . acos ( 1.0 ); // 0.0 Math . acos ( - 1.0 ); // 3.14285714286 Math . acos ( 0.0 ); // 1.57142857143 C. Math.tan(x), Math.atan(x), Math.atan2(x, y) : \u00b6 D. Math.hypot(x, y) : \u00b6 Returns the value of the hypotenuse of a right-angled triangle, assumed to be formed by x and y , i.e., \\sqrt{x^2 + y^2} \\sqrt{x^2 + y^2} Same as doing this : Math . sqrt ( Math . pow ( x , 2 ) + Math . pow ( y , 2 )) Math . hypot ( 3 , 4 ); // 5.0 Math . hypot ( 5 , 12 ); // 13.0 Math . hypot ( 5 , 9 ); // 10.294630141 E. Math.toRadians(x), Math.toDegrees(x) : \u00b6 6. Other Functions : \u00b6 Math.max(x, y) Returns the number with the highest value in the 2 arguments Math . max ( 3 , 4 ); // 4 Math . max ( 1 , 1 ); // 1 Math . max ( - 3 , - 2.5 ); // -2.5 Math.min(x, y) Returns the number with the lowest value in the 2 arguments Math . min ( 3 , 4 ); // 3 Math . min ( 1 , 1 ); // 1 Math . min ( - 3 , - 2.5 ); // -3.0 Math.random() Returns a random number between 0 and 1 Math . random (); // 0.59642578594784 Math . random (); // 0.94919217190341 Math . random (); // 0.73008154368005","title":"The Math Class"},{"location":"java/math/#java-math-class","text":"","title":"JAVA MATH CLASS :"},{"location":"java/math/#1-floating-point-precision-methods","text":"","title":"1. Floating-Point Precision Methods :"},{"location":"java/math/#a-mathceilx","text":"Returns the value of x rounded down to its nearest integer. Similar to least-integer function in Math, i.e., \\mathbf{\\lceil{x}\\rceil = \\text{LIF}} \\mathbf{\\lceil{x}\\rceil = \\text{LIF}} \\text{Ex : }\\lceil{8.2}\\rceil = 9.0, \\lceil{-2.3}\\rceil = -2.0 \\text{Ex : }\\lceil{8.2}\\rceil = 9.0, \\lceil{-2.3}\\rceil = -2.0 Math . ceil ( 8.2 ); // 9.0 Math . ceil ( 9.7 ); // 10.0 Math . ceil ( - 2.3 ); // -2.0 Math . ceil ( - 4.8 ); // -4.0","title":"A. Math.ceil(x) :"},{"location":"java/math/#b-mathfloorx","text":"Returns the value of x rounded up to its nearest integer. Similar to greatest-integer function in Math, i.e., \\mathbf{\\lfloor{x}\\rfloor = \\text{GIF}} \\mathbf{\\lfloor{x}\\rfloor = \\text{GIF}} \\text{Ex : }\\lfloor{8.2}\\rfloor = 8.0, \\lfloor{-2.3}\\rfloor = -3.0 \\text{Ex : }\\lfloor{8.2}\\rfloor = 8.0, \\lfloor{-2.3}\\rfloor = -3.0 Math . floor ( 8.2 ); // 8.0 Math . floor ( 9.7 ); // 9.0 Math . floor ( - 2.3 ); // -3.0 Math . floor ( - 4.8 ); // -5.0","title":"B. Math.floor(x) :"},{"location":"java/math/#c-mathroundx","text":"Returns the value of x rounded to its nearest integer. Math . round ( 8.2 ); // 8.0 Math . round ( 9.7 ); // 10.0 Math . round ( - 2.3 ); // -2.0 Math . round ( - 4.8 ); // -5.0 Math Constants for \\mathbf{\\pi} \\mathbf{\\pi} ** and e Math.PI Math . PI // 3.14285714286 Math.E Math . E // 2.7182818284","title":"C. Math.round(x) :"},{"location":"java/math/#2-logarithmic-and-exponential-methods","text":"","title":"2. Logarithmic and Exponential Methods :"},{"location":"java/math/#a-mathlogx","text":"Returns the value of natural logarithm of x , i.e., \\log_e{x} \\text{ or } \\ln{x} \\log_e{x} \\text{ or } \\ln{x} \\text{Ex : }\\log_{e}{e} = 1.0, \\ln{1} = 0.0 \\text{Ex : }\\log_{e}{e} = 1.0, \\ln{1} = 0.0 Math . log ( Math . E ); // 1.0 Math . log ( 0 ); // -Infinity Math . log ( 1 ); // 0.0","title":"A. Math.log(x) :"},{"location":"java/math/#b-mathlog10x","text":"Returns the value of \\log_{10}{x} \\log_{10}{x} \\text{Ex : }\\log_{10}{10} = 1.0, \\log_{10}{1} = 0.1 \\text{Ex : }\\log_{10}{10} = 1.0, \\log_{10}{1} = 0.1 Math . log10 ( 10 ); // 1.0 Math . log10 ( 100 ); // 10.0 Math . log10 ( 1 ); // 0.1","title":"B. Math.log10(x) :"},{"location":"java/math/#c-mathexpx","text":"Return the value of e raised to the power of x , i.e., e^x e^x : \\text{Ex : }e^0 = 0, e^1 = 2.7182 \\text{Ex : }e^0 = 0, e^1 = 2.7182 Math . exp ( 0 ); // 1.0 Math . exp ( 1 ); // 2.7182818284 // The above is equal to Math.E Math . exp ( 0.5 ); // 1.64872127","title":"C. Math.exp(x) :"},{"location":"java/math/#3-power-and-root-methods","text":"","title":"3. Power and Root Methods :"},{"location":"java/math/#a-mathsqrtx","text":"Returns the value of square-root of x , i.e., \\sqrt{x} \\sqrt{x} \\text{Ex : }\\sqrt{9} = 3.0, \\sqrt{2} = 1.414 \\text{Ex : }\\sqrt{9} = 3.0, \\sqrt{2} = 1.414 Math . sqrt ( 9 ); // 3.0 Math . sqrt ( - 36 ); // NaN Math . sqrt ( 2 ); // 1.41421356237","title":"A. Math.sqrt(x) :"},{"location":"java/math/#b-mathcbrtx","text":"Returns the value of cube-root of x , i.e., \\sqrt[3]{x} \\sqrt[3]{x} \\text{Ex : }\\sqrt[3]{8} = 2.0, \\sqrt[3]{-27} = -3.0 \\text{Ex : }\\sqrt[3]{8} = 2.0, \\sqrt[3]{-27} = -3.0 Math . cbrt ( 8 ); // 2.0 Math . cbrt ( - 27 ); // -3.0 Math . cbrt ( 45 ); // 3.55689330449","title":"B. Math.cbrt(x) :"},{"location":"java/math/#c-mathpowx-y","text":"Returns the value of x to the power of y , i.e., {x^y} {x^y} \\text{Ex : }2^3 = 8.0, 4^\\frac{1}{2} = 2.0 \\text{Ex : }2^3 = 8.0, 4^\\frac{1}{2} = 2.0 Math . pow ( 2 , 3 ); // 8.0 Math . pow ( 3 , 0 ); // 1.0 Math . pow ( 4 , 0.5 ); // 2.0","title":"C. Math.pow(x, y) :"},{"location":"java/math/#4-sign-related-methods","text":"","title":"4. Sign-Related Methods :"},{"location":"java/math/#a-mathabsx","text":"Returns the absolute value of x . Similar to Modulus function in Math, i.e., \\mathbf{ \\vert{x}\\vert = \\begin{cases} +x, & \\text{if ${n > 0}$} \\\\ 0, & \\text{if ${n = 0}$} \\\\ +x, & \\text{if ${n < 0}$} \\\\ \\end{cases} = \\text{Modulus Function} } \\mathbf{ \\vert{x}\\vert = \\begin{cases} +x, & \\text{if ${n > 0}$} \\\\ 0, & \\text{if ${n = 0}$} \\\\ +x, & \\text{if ${n < 0}$} \\\\ \\end{cases} = \\text{Modulus Function} } \\text{Ex : }\\vert50\\vert = 50, \\vert-50\\vert = 50, \\vert-50.5\\vert = 50.5 \\text{Ex : }\\vert50\\vert = 50, \\vert-50\\vert = 50, \\vert-50.5\\vert = 50.5 Math . abs ( 50 ); // 50 Math . abs ( - 50 ); // 50 Math . abs ( - 50.5 ); // 50.5","title":"A. Math.abs(x) :"},{"location":"java/math/#b-mathsignumx","text":"Similar to Signum function in Math, i.e., \\mathbf{ \\{x\\} = \\begin{cases} 1.0, & \\text{if ${x > 0}$} \\\\ 0, & \\text{if ${x = 0}$} \\\\ -1.0, & \\text{if ${x < 0}$} \\\\ \\end{cases} = \\text{Signum Function} } \\mathbf{ \\{x\\} = \\begin{cases} 1.0, & \\text{if ${x > 0}$} \\\\ 0, & \\text{if ${x = 0}$} \\\\ -1.0, & \\text{if ${x < 0}$} \\\\ \\end{cases} = \\text{Signum Function} } \\text{Ex : }\\{-50.5\\} = 50.5 \\text{Ex : }\\{-50.5\\} = 50.5 Math . signum ( 2.3 ); // 1.0 Math . signum ( - 5.7 ); // -1.0 Math . signum ( 0 ); // 0.0","title":"B. Math.signum(x) :"},{"location":"java/math/#5-trigonometric-methods","text":"","title":"5. Trigonometric Methods :"},{"location":"java/math/#a-mathsinx-mathcosx","text":"Returns the sine and cosine of x respectively, i.e., \\sin x \\text{ or } \\cos x \\sin x \\text{ or } \\cos x x should be passed in Radians. Math . sin ( 0 ); // 0.0 Math . sin ( Math . PI / 2 ); // 1.0 Math . sin ( - Math . PI / 2 ); // -1.0 Math . cos ( 0 ); // 1.0 Math . cos ( Math . PI ); // -1.0 Math . cos ( - Math . PI ); // -1.0","title":"A. Math.sin(x), Math.cos(x) :"},{"location":"java/math/#b-mathasinx-mathacosx","text":"Returns the arc-sine and arc-cosine (or, sine and cosine inverses, respectively) of x respectively, i.e., \\sin^{-1} x \\text{ or } \\cos^{-1} x \\sin^{-1} x \\text{ or } \\cos^{-1} x x should be passed in Radians. Math . asin ( 0.0 ); // 0.0 Math . asin ( 1.0 ); // 1.57142857143 Math . asin ( - 1.0 ); // -1.57142857143 Math . acos ( 1.0 ); // 0.0 Math . acos ( - 1.0 ); // 3.14285714286 Math . acos ( 0.0 ); // 1.57142857143","title":"B. Math.asin(x), Math.acos(x) :"},{"location":"java/math/#c-mathtanx-mathatanx-mathatan2x-y","text":"","title":"C. Math.tan(x), Math.atan(x), Math.atan2(x, y) :"},{"location":"java/math/#d-mathhypotx-y","text":"Returns the value of the hypotenuse of a right-angled triangle, assumed to be formed by x and y , i.e., \\sqrt{x^2 + y^2} \\sqrt{x^2 + y^2} Same as doing this : Math . sqrt ( Math . pow ( x , 2 ) + Math . pow ( y , 2 )) Math . hypot ( 3 , 4 ); // 5.0 Math . hypot ( 5 , 12 ); // 13.0 Math . hypot ( 5 , 9 ); // 10.294630141","title":"D. Math.hypot(x, y) :"},{"location":"java/math/#e-mathtoradiansx-mathtodegreesx","text":"","title":"E. Math.toRadians(x), Math.toDegrees(x) :"},{"location":"java/math/#6-other-functions","text":"Math.max(x, y) Returns the number with the highest value in the 2 arguments Math . max ( 3 , 4 ); // 4 Math . max ( 1 , 1 ); // 1 Math . max ( - 3 , - 2.5 ); // -2.5 Math.min(x, y) Returns the number with the lowest value in the 2 arguments Math . min ( 3 , 4 ); // 3 Math . min ( 1 , 1 ); // 1 Math . min ( - 3 , - 2.5 ); // -3.0 Math.random() Returns a random number between 0 and 1 Math . random (); // 0.59642578594784 Math . random (); // 0.94919217190341 Math . random (); // 0.73008154368005","title":"6. Other Functions :"},{"location":"js/arrow/","text":"","title":"Arrow functions"},{"location":"js/async/","text":"","title":"Aysnchronous JS"},{"location":"js/destructure/","text":"","title":"Array and Object DeStructuring"},{"location":"js/extras/","text":"","title":"Extras"},{"location":"js/fnctns/","text":"","title":"Functions Unlimited - JS"},{"location":"js/keywords/","text":"","title":"var, let, const keywords"},{"location":"js/modules/","text":"","title":"Modules in JS"},{"location":"js/obj/","text":"","title":"Object Literal Enhancements"},{"location":"js/oops/","text":"","title":"OOPS Concepts"},{"location":"js/overview/","text":"","title":"Series OverView"},{"location":"js/spread/","text":"","title":"Rest and Spread Operators"},{"location":"js/templates/","text":"","title":"Template Literals"}]}